generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          UserRole  @default(STUDENT)
  bio           String?
  website       String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  courses       Course[]
  enrollments   Enrollment[]
  lessonProgress LessonProgress[]
  reviews       Review[]
  certificates  Certificate[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course{
  id               String      @id @default(uuid())
  title            String
  description      String
  imageUrl         String?
  price            Int
  duration         Int
  level            CourseLevel @default(Beginner)
  category         String
  smallDescription String
  status           CourseStatus @default(Draft)
  slug             String      @unique
  requirements     String[]
  whatYouWillLearn String[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  userId           String?
  user             User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapters         Chapter[]
  enrollments      Enrollment[]
  reviews          Review[]

  @@map("course")
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String?
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
  @@map("chapter")
}

model Lesson {
  id          String   @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  duration    Int?     // in seconds
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  attachments Attachment[]
  userProgress LessonProgress[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([chapterId])
  @@map("lesson")
}

model Attachment {
  id       String @id @default(uuid())
  name     String
  url      String
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([lessonId])
  @@map("attachment")
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
  @@map("enrollment")
}

model LessonProgress {
  id         String   @id @default(uuid())
  userId     String
  lessonId   String
  isCompleted Boolean @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([lessonId])
  @@index([userId])
  @@map("lesson_progress")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      // 1-5 stars
  comment   String?
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
  @@map("review")
}

model Certificate {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  issuedAt  DateTime @default(now())

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
  @@map("certificate")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseStatus{
  Draft
  Published
  Archived
}

enum CourseLevel{
  Beginner
  Intermediate
  Advanced
}
